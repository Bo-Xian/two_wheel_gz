<?xml version="1.0" ?>
<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched --> <!-- twowheel.world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find fira_gz)/world/twowheel_new.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="true"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>


  <!-- Load the URDF into the ROS Parameter Server --> <!-- twowheel.urdf -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find twowheel)/urdf/twowheel_new.urdf'" />

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model twowheel -param robot_description -x -0.15 -y -1.8 -z 0.035 -R 0 -P 0 -Y 1.5708"/>

  <include file="$(find twowheel)/launch/twowheel_control.launch" />

  <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch" />

  <node name="twowheel_controller" pkg="strategy" type="twowheel_controller"/>

  <node name="color_recognition" pkg="strategy" type="color_recognition"/>

</launch>
